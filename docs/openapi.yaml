openapi: 3.0.0
info:
  title: Market REST API
  description: A REST API for managing market items, user accounts, authentication, profiles, and shopping carts.
  version: "1.0.1"
paths:
  /items:
    get:
      tags:
        - "📦 Items"
      summary: Get All Items
      description: Retrieve a list of all items. (Public endpoint)
      responses:
        "200":
          description: A list of items retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - "📦 Items"
      summary: Create Item
      description: Create a new item. (Requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        description: Item to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemInput"
      responses:
        "201":
          description: Item created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /items/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the item.
        schema:
          type: integer
    get:
      tags:
        - "📦 Items"
      summary: Get Item by ID
      description: Retrieve an item by its ID. (Public endpoint)
      responses:
        "200":
          description: Item retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - "📦 Items"
      summary: Update Item
      description: Update an existing item. (Requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        description: Updated item payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemInput"
      responses:
        "200":
          description: Item updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "📦 Items"
      summary: Delete Item
      description: Delete an item by its ID. (Requires authentication)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Item deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "item deleted successfully"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    get:
      tags:
        - "👥 Users"
      summary: Get All Users
      description: Retrieve a list of all users. (Requires authentication)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the user.
        schema:
          type: integer
    get:
      tags:
        - "👥 Users"
      summary: Get User by ID
      description: Retrieve a user by their ID. (Requires authentication)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - "👥 Users"
      summary: Update User
      description: Update an existing user. (Requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        description: Updated user payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user updated successfully"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "👥 Users"
      summary: Delete User
      description: Delete a user by their ID. (Requires authentication)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user deleted successfully"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/me:
    get:
      tags:
        - "🙋 Profile"
      summary: Get Profile
      description: Retrieve the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - "🙋 Profile"
      summary: Update Profile
      description: Update the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        description: Updated profile payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "profile updated successfully"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "🙋 Profile"
      summary: Delete Profile
      description: Delete the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "profile deleted successfully"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/register:
    post:
      tags:
        - "🔒 Authentication"
      summary: Register User
      description: Register a new user.
      requestBody:
        description: User registration payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - User already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/login:
    post:
      tags:
        - "🔒 Authentication"
      summary: Authenticate User
      description: Authenticate a user using email and password.
      requestBody:
        description: User authentication payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: User authenticated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid credentials or Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/logout:
    post:
      tags:
        - "🔒 Authentication"
      summary: Logout
      description: Log out the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User logged out successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "logout successful"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/refresh:
    post:
      tags:
        - "🔒 Authentication"
      summary: Refresh Tokens
      description: Refresh access and refresh tokens using the provided refresh token.
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Tokens refreshed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - Invalid or expired refresh token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /cart/items:
    get:
      tags:
        - "🛒 Cart"
      summary: Get Cart Items
      description: Retrieve all items in the authenticated user's cart.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cart items retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "🛒 Cart"
      summary: Clear Cart
      description: Remove all items from the currently authenticated user's cart.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cart cleared successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "cleared cart"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /cart/items/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the item in the cart.
        schema:
          type: integer
    post:
      tags:
        - "🛒 Cart"
      summary: Add Item to Cart
      description: Add an item to the authenticated user's cart.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Item added to cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "added item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Cart or Item not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - "🛒 Cart"
      summary: Update Cart Item
      description: Update the quantity of an item in the cart.
      security:
        - bearerAuth: []
      requestBody:
        description: Cart item update payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateItem"
      responses:
        "200":
          description: Cart item updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "updated item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Cart or Item not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "🛒 Cart"
      summary: Delete Item from Cart
      description: Delete an item from the cart.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cart item deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "deleted item"
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Cart or Item not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request payload"
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "T-shirt"
          minLength: 5
          maxLength: 40
        description:
          type: string
          example: "A premium quality T-shirt featuring an exclusive logo design."
        price:
          type: integer
          example: 30
          minimum: 10
          maximum: 100
        stock:
          type: integer
          example: 20
        created_at:
          type: string
          format: date-time
          example: "2025-02-25T12:37:32Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-02-25T12:37:32Z"
      required:
        - name
        - price
        - stock
    ItemInput:
      type: object
      properties:
        name:
          type: string
          example: "T-shirt"
          minLength: 5
          maxLength: 40
        description:
          type: string
          example: "A premium quality T-shirt featuring an exclusive logo design."
        price:
          type: integer
          example: 30
          minimum: 10
          maximum: 100
        stock:
          type: integer
          example: 20
      required:
        - name
        - price
        - stock
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Martin"
          minLength: 2
          maxLength: 30
        last_name:
          type: string
          example: "Kalts"
          minLength: 2
          maxLength: 30
        email:
          type: string
          example: "martin@gmail.com"
        password:
          type: string
          example: "$2a$10$EKq8Yv9Y1WnrDFEdiMYCSOaz/..."
          minLength: 8
        phone_number:
          type: string
          pattern: "^\\+7[0-9]{10}$"
          example: "+77007473472"
        role:
          type: string
          enum:
            - admin
            - user
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2025-02-25T12:37:32Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-02-25T12:37:32Z"
      required:
        - first_name
        - last_name
        - email
        - password
        - phone_number
        - role
    RegisterUser:
      type: object
      properties:
        first_name:
          type: string
          example: "Martin"
          minLength: 2
          maxLength: 30
        last_name:
          type: string
          example: "Kalts"
          minLength: 2
          maxLength: 30
        email:
          type: string
          example: "martin@gmail.com"
        password:
          type: string
          example: "12341234"
          minLength: 8
        confirm_password:
          type: string
          example: "12341234"
          minLength: 8
        phone_number:
          type: string
          pattern: "^\\+7[0-9]{10}$"
          example: "+77007473472"
      required:
        - first_name
        - last_name
        - email
        - password
        - confirm_password
        - phone_number
    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: "martin@gmail.com"
        password:
          type: string
          example: "12341234"
          minLength: 8
      required:
        - email
        - password
    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
          example: "Martin"
          minLength: 2
          maxLength: 30
        last_name:
          type: string
          example: "Kalts"
          minLength: 2
          maxLength: 30
        email:
          type: string
          example: "martin.programmer@gmail.com"
        password:
          type: string
          example: "newSecret123"
          minLength: 8
        confirm_password:
          type: string
          example: "newSecret123"
          minLength: 8
        phone_number:
          type: string
          pattern: "^\\+7[0-9]{10}$"
          example: "+77007473472"
      description: All fields are optional. If updating password, both password and confirm_password must be provided and match.
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4..."
      required:
        - access_token
        - refresh_token
    UpdateItem:
      type: object
      properties:
        quantity:
          type: integer
          example: 2
      required:
        - quantity
