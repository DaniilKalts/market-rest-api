// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/item": {
            "get": {
                "description": "Get an item with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Get item by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Item ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/item/create": {
            "post": {
                "description": "Create a new item with the given payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Create a new item",
                "parameters": [
                    {
                        "description": "Item to create",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestCreateItem"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Item created",
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/item/delete": {
            "delete": {
                "description": "Delete an item with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Delete item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Item ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/item/update": {
            "put": {
                "description": "Update an existing item with the given payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Update item",
                "parameters": [
                    {
                        "description": "Item to update",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestUpdateItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item udpated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/items": {
            "get": {
                "description": "Retrieve a list of all items",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Get all items",
                "responses": {
                    "200": {
                        "description": "A list of items retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Item"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Get a user with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Create a new user with the given payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestCreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/models.RequestCreateUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "description": "Delete a user with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/update": {
            "put": {
                "description": "Update an existing user with the given payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "User to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestUpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User udpated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "A list of users retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BadRequestError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request payload"
                }
            }
        },
        "models.InternalServerError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to create item"
                }
            }
        },
        "models.Item": {
            "type": "object",
            "required": [
                "name",
                "price"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-02-25T12:37:32Z"
                },
                "description": {
                    "type": "string",
                    "example": "A fashionable T-shirt with IITU logo."
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 40,
                    "minLength": 5,
                    "example": "T-shirt"
                },
                "price": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 100,
                    "example": 100
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-02-25T12:37:32Z"
                }
            }
        },
        "models.RequestCreateItem": {
            "type": "object",
            "required": [
                "name",
                "price"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "A fashionable T-shirt with IITU logo."
                },
                "name": {
                    "type": "string",
                    "maxLength": 40,
                    "minLength": 5,
                    "example": "T-shirt"
                },
                "price": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 100,
                    "example": 100
                }
            }
        },
        "models.RequestCreateUser": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password_hash"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "Doe"
                },
                "password_hash": {
                    "type": "string",
                    "minLength": 8,
                    "example": "secret12345"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+12345678901"
                }
            }
        },
        "models.RequestUpdateItem": {
            "type": "object",
            "required": [
                "name",
                "price"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "A fashionable T-shirt with IITU logo."
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 40,
                    "minLength": 5,
                    "example": "T-shirt"
                },
                "price": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 100,
                    "example": 100
                }
            }
        },
        "models.RequestUpdateUser": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "Doe"
                },
                "password_hash": {
                    "type": "string",
                    "minLength": 8,
                    "example": "newSecret123"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+12345678901"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password_hash"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-02-25T12:37:32Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "Doe"
                },
                "password_hash": {
                    "type": "string",
                    "minLength": 8,
                    "example": "$2a$10$EKq8Yv9Y1WnrDFEdiMYCSOaz/oq2I9l9ngJyH/eBRM3lIbcJRLS02"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+12345678901"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-02-25T12:37:32Z"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
