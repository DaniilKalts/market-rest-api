// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TokenStore is an autogenerated mock type for the TokenStore type
type TokenStore struct {
	mock.Mock
}

// DeleteJWToken provides a mock function with given fields: userID, token
func (_m *TokenStore) DeleteJWToken(userID int, token string) error {
	ret := _m.Called(userID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJWToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJWTokens provides a mock function with given fields: userID, accessToken, refreshToken
func (_m *TokenStore) DeleteJWTokens(userID int, accessToken string, refreshToken string) error {
	ret := _m.Called(userID, accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJWTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(userID, accessToken, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveJWToken provides a mock function with given fields: userID, token
func (_m *TokenStore) SaveJWToken(userID int, token string) error {
	ret := _m.Called(userID, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveJWToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveJWTokens provides a mock function with given fields: userID, accessToken, refreshToken
func (_m *TokenStore) SaveJWTokens(userID int, accessToken string, refreshToken string) error {
	ret := _m.Called(userID, accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for SaveJWTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(userID, accessToken, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateJWToken provides a mock function with given fields: userID, token
func (_m *TokenStore) ValidateJWToken(userID int, token string) (bool, error) {
	ret := _m.Called(userID, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJWToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (bool, error)); ok {
		return rf(userID, token)
	}
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(userID, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenStore creates a new instance of TokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenStore {
	mock := &TokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
