// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "github.com/DaniilKalts/market-rest-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: cartID, itemID
func (_m *CartRepository) Add(cartID int, itemID int) (*models.CartItem, error) {
	ret := _m.Called(cartID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *models.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*models.CartItem, error)); ok {
		return rf(cartID, itemID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *models.CartItem); ok {
		r0 = rf(cartID, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(cartID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clear provides a mock function with given fields: cartID
func (_m *CartRepository) Clear(cartID int) error {
	ret := _m.Called(cartID)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: cartID, itemID
func (_m *CartRepository) Delete(cartID int, itemID int) error {
	ret := _m.Called(cartID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(cartID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: userID
func (_m *CartRepository) GetByUserID(userID int) (*models.Cart, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Cart, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Cart); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItem provides a mock function with given fields: cartID, itemID
func (_m *CartRepository) GetCartItem(cartID int, itemID int) (*models.CartItem, error) {
	ret := _m.Called(cartID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItem")
	}

	var r0 *models.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*models.CartItem, error)); ok {
		return rf(cartID, itemID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *models.CartItem); ok {
		r0 = rf(cartID, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(cartID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: cartID, itemID, quantity
func (_m *CartRepository) Update(cartID int, itemID int, quantity uint) (*models.CartItem, error) {
	ret := _m.Called(cartID, itemID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, uint) (*models.CartItem, error)); ok {
		return rf(cartID, itemID, quantity)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) *models.CartItem); ok {
		r0 = rf(cartID, itemID, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) error); ok {
		r1 = rf(cartID, itemID, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCartRepository creates a new instance of CartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepository {
	mock := &CartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
