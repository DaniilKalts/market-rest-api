name: Run Checks

on:
  push:
    branches: [ main ]

jobs:
  run-checks:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # ensures full repository history

      # Setup Go environment using Go 1.24
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      # Cache Go modules to speed up builds
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Formatting check using gofmt
      - name: Check formatting with gofmt
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted properly:"
            echo "$unformatted"
            exit 1
          fi

      # Pre-build step: force generation of export data for packages
      - name: Pre-build to generate export data
        run: go list -json ./... > /dev/null

      # Install golangci-lint using go install
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      # Run golangci-lint using the installed binary
      - name: Run golangci-lint
        run: |
          export PATH="$HOME/go/bin:$PATH"
          golangci-lint run

      # Run static analysis with go vet
      - name: Run go vet
        run: go vet ./...

      # Install gosec using go install
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      # Run security analysis with gosec
      - name: Run gosec
        run: |
          export PATH="$HOME/go/bin:$PATH"
          gosec ./...

      # Run unit tests with coverage for services
      - name: Run unit tests for services
        run: cd internal/services && go test -v -coverprofile=coverage.out
